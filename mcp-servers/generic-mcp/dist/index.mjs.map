{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Hono } from 'hono';\r\nimport { serve } from '@hono/node-server';\r\nimport { MCPService, MCPTool, MCPResource, ServerConfig } from '@modelcontextprotocol/runtime';\r\nimport { z } from 'zod';\r\n\r\n// Define the schema for the tool's input\r\nconst exampleToolInputSchema = z.object({\r\n  name: z.string().describe('The name to greet.'),\r\n});\r\n\r\n// Define the schema for the tool's output\r\nconst exampleToolOutputSchema = z.object({\r\n  greeting: z.string().describe('A personalized greeting.'),\r\n});\r\n\r\n// Define the schema for the resource's output\r\nconst exampleResourceOutputSchema = z.object({\r\n  data: z.string().describe('Some example data.'),\r\n});\r\n\r\nclass GenericMCPService extends MCPService {\r\n  constructor(app: Hono, config: ServerConfig) {\r\n    super(app, config);\r\n\r\n    // Define tools\r\n    const greetUserTool = new MCPTool({\r\n      name: 'greet_user',\r\n      description: 'Greets a user by name.',\r\n      inputSchema: exampleToolInputSchema,\r\n      func: this.greetUser.bind(this),\r\n    });\r\n\r\n    // Define resources\r\n    const exampleDataResource = new MCPResource({\r\n      name: 'example_data',\r\n      description: 'Provides some example data.',\r\n      schema: exampleResourceOutputSchema,\r\n      get: this.getExampleData.bind(this),\r\n    });\r\n\r\n    // Register tools and resources\r\n    this.registerTools([greetUserTool]);\r\n    this.registerResources([exampleDataResource]);\r\n  }\r\n\r\n  async greetUser(input: z.infer<typeof exampleToolInputSchema>): Promise<z.infer<typeof exampleToolOutputSchema>> {\r\n    // console.log(`Received greet_user request for: ${input.name}`); // Removed this.logger\r\n    return { greeting: `Hello, ${input.name} from Generic MCP Server!` };\r\n  }\r\n\r\n  async getExampleData(): Promise<z.infer<typeof exampleResourceOutputSchema>> {\r\n    // console.log('Received get_example_data request'); // Removed this.logger\r\n    return { data: 'This is some example data from Generic MCP Server.' };\r\n  }\r\n}\r\n\r\nconst app = new Hono();\r\nconst serviceConfig: ServerConfig = {\r\n  name: 'generic-mcp-server',\r\n  version: '1.0.0',\r\n  description: 'Generic MCP server for demonstration and scaffolding.',\r\n};\r\nconst service = new GenericMCPService(app, serviceConfig); // Pass app and config to constructor\r\n\r\n// The MCPService now handles its own routes internally\r\n// app.post('/mcp', async (c) => { // This block is no longer needed as MCPService handles /mcp/tool and /mcp/resource routes\r\n//   const body = await c.req.json();\r\n//   const response = await service.handleRequest(body); // Removed handleRequest\r\n//   return c.json(response);\r\n// });\r\n\r\nconst port = 3000; // You can make this configurable\r\nserve({\r\n  fetch: app.fetch,\r\n  port,\r\n}, () => {\r\n  console.log(`Generic MCP Server running on http://localhost:${port}`);\r\n});\r\n"],"mappings":";AAAA,SAAS,YAAY;AACrB,SAAS,aAAa;AACtB,SAAS,YAAY,SAAS,mBAAiC;AAC/D,SAAS,SAAS;AAGlB,IAAM,yBAAyB,EAAE,OAAO;AAAA,EACtC,MAAM,EAAE,OAAO,EAAE,SAAS,oBAAoB;AAChD,CAAC;AAGD,IAAM,0BAA0B,EAAE,OAAO;AAAA,EACvC,UAAU,EAAE,OAAO,EAAE,SAAS,0BAA0B;AAC1D,CAAC;AAGD,IAAM,8BAA8B,EAAE,OAAO;AAAA,EAC3C,MAAM,EAAE,OAAO,EAAE,SAAS,oBAAoB;AAChD,CAAC;AAED,IAAM,oBAAN,cAAgC,WAAW;AAAA,EACzC,YAAYA,MAAW,QAAsB;AAC3C,UAAMA,MAAK,MAAM;AAGjB,UAAM,gBAAgB,IAAI,QAAQ;AAAA,MAChC,MAAM;AAAA,MACN,aAAa;AAAA,MACb,aAAa;AAAA,MACb,MAAM,KAAK,UAAU,KAAK,IAAI;AAAA,IAChC,CAAC;AAGD,UAAM,sBAAsB,IAAI,YAAY;AAAA,MAC1C,MAAM;AAAA,MACN,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,KAAK,KAAK,eAAe,KAAK,IAAI;AAAA,IACpC,CAAC;AAGD,SAAK,cAAc,CAAC,aAAa,CAAC;AAClC,SAAK,kBAAkB,CAAC,mBAAmB,CAAC;AAAA,EAC9C;AAAA,EAEA,MAAM,UAAU,OAAiG;AAE/G,WAAO,EAAE,UAAU,UAAU,MAAM,IAAI,4BAA4B;AAAA,EACrE;AAAA,EAEA,MAAM,iBAAuE;AAE3E,WAAO,EAAE,MAAM,qDAAqD;AAAA,EACtE;AACF;AAEA,IAAM,MAAM,IAAI,KAAK;AACrB,IAAM,gBAA8B;AAAA,EAClC,MAAM;AAAA,EACN,SAAS;AAAA,EACT,aAAa;AACf;AACA,IAAM,UAAU,IAAI,kBAAkB,KAAK,aAAa;AASxD,IAAM,OAAO;AACb,MAAM;AAAA,EACJ,OAAO,IAAI;AAAA,EACX;AACF,GAAG,MAAM;AACP,UAAQ,IAAI,kDAAkD,IAAI,EAAE;AACtE,CAAC;","names":["app"]}